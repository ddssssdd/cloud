package com.sfu;

import com.netflix.config.ConfigurationManager;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;

public class OpenTest {
    public static void main(String[] args) {
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.metrics.rollingStats.timeInMilliseconds", "10000");

        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.requestVolumeThreshold", 10);

        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.errorThresholdPercentage", 50);

        for(int i=0;i<15;i++){

            MyCommand command = new MyCommand();
            command.execute();


            if (command.isCircuitBreakerOpen()){
                System.out.println("断路器被打开，执行第"+(i+1)+"个命令");
            }
        }


    }

    static class MyCommand extends HystrixCommand<String> {

        public MyCommand() {
            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))
                    .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
                            .withExecutionTimeoutInMilliseconds(500)));
        }

        protected String run() throws Exception {
            System.out.println("命令执行");
            Thread.sleep(800);
            return "";
        }

        @Override
        protected String getFallback() {
            System.out.println("执行回退方法");
            return "fallback";
        }
    }
}
